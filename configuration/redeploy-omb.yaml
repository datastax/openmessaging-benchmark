#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

- name: All hosts installation
  hosts: all
  connection: ssh
  become: true
  tasks:
    - name: Get variables from terraform
      include_vars: ./tf_ansible_vars.yaml
    - name: "Configuration facts"
      set_fact:
        zookeeperServers: "{{ groups['zookeeper'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | map('regex_replace', '^(.*)$', '\\1:2181') | join(',') }}"
        serviceUrl: "pulsar://{{ hostvars[groups['pulsar'][0]].private_ip }}:6650/"
        serviceTlsUrl: "pulsar+ssl://{{ hostvars[groups['pulsar'][0]].private_ip }}:6651/"
        httpUrl: "http://{{ hostvars[groups['pulsar'][0]].private_ip }}:8080/"
        httpsUrl: "https://{{ hostvars[groups['pulsar'][0]].private_ip }}:8443/"
        pulsarServer: "{{ hostvars[groups['pulsar'][0]].private_ip }}"
        bootstrapServers: "{{ groups['pulsar'] | map('extract', hostvars, ['private_ip']) | map('regex_replace', '^(.*)$', '\\1:9092') | join(',') }}"
        bootstrapTlsServers: "{{ groups['pulsar'] | map('extract', hostvars, ['private_ip']) | map('regex_replace', '^(.*)$', '\\1:9093') | join(',') }}"
        private_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        max_heap_memory: "24g"
        max_direct_memory: "24g"
        gc_options: "{{ pulsar_package['gc'] }}"
        s3_bucket: "{{ tf_s3_bucket }}"
        s3_region: "{{ tf_s3_region }}"
        s3_url: "https://s3.{{ tf_s3_region }}.amazonaws.com"

- name: "OpenMessaging Benchmark setup"
  hosts: client
  connection: ssh
  become: true
  tasks:
    - file: path=/opt/benchmark state=absent
    - name: Copy benchmark code
      unarchive:
        src: "{{ benchmark_package['path'] }}"
        dest: /opt
    - shell: "mv /opt/{{ benchmark_package['name'] }} /opt/benchmark"
    - file: path=/opt/benchmark/rootca state=absent
    - file: path=/opt/benchmark/rootca state=directory
    - name: If broker TLS is enabled, copy TLS certificate related security files from localhost to Pulsar (broker) servers
      copy:
        src: "{{ item.src_file }}"
        dest: "{{ item.dest_file }}"
        force: false
      with_items:
        - { src_file: "files/certs/ca.cert.pem", 
            dest_file: "/opt/benchmark/rootca/ca.cert.pem" }
      when: tls is defined and tls|bool
    - name: Enviroment Variables for Placeholders
      template:
        src: "templates/setenv.sh"
        dest: "/opt/benchmark/bin/setenv.sh"
    - name: Make setenv.sh executable
      shell: |
        chmod 755 /opt/benchmark/bin/setenv.sh
    - name: Configure installation information
      template:
        src: "templates/install.yaml"
        dest: "/opt/benchmark/install.yaml"
    - name: Configure workers information 
      template:
        src: "templates/workers.yaml"
        dest: "/opt/benchmark/workers.yaml"
    - name: Get list of driver config files
      raw: ls -1 /opt/benchmark/driver-pulsar/*.yaml
      register: drivers_list
    - name: Configure service URL
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  serviceUrl\: '
         line: '  serviceUrl: ${SERVICEURL}'
      with_items: '{{ drivers_list.stdout_lines }}'
    - name: Configure http URL
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  httpUrl: '
         line: '  httpUrl: ${HTTPURL}'
      with_items: '{{ drivers_list.stdout_lines }}'
    - name: Configure tlsTrustCertsFilePath
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  tlsTrustCertsFilePath:'
         line: '  tlsTrustCertsFilePath: ${TLSCERTPATH}'
      with_items: '{{ drivers_list.stdout_lines }}'
    - name: Get list of kafka driver config files
      raw: ls -1 /opt/benchmark/driver-kafka/*.yaml
      register: kafka_drivers_list
    - name: Configure Kafka Bootstrap Servers
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  bootstrap.servers='
         line: '  bootstrap.servers=${BOOTSTRAPSERVERS}'
      with_items: '{{ kafka_drivers_list.stdout_lines }}'
    - name: Configure Starlight for RabbitMQ Driver
      template:
        src: "templates/starlight-rabbitmq.yaml"
        dest: "/opt/benchmark/driver-starlight-rabbitmq/starlight-rabbitmq.yaml"
    - name: Get list of jms driver config files
      raw: ls -1 /opt/benchmark/driver-jms/pulsar*.yaml
      register: jms_drivers_list
    - name: Configure JMS service URL
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  serviceUrl\: '
         line: '  serviceUrl: ${SERVICEURL}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'
    - name: Configure JMS service Connection Handler
      ansible.builtin.replace:
         dest: '{{ item }}'
         regexp: 'pulsar\:\/\/localhost\:6650'
         replace: '${SERVICEURL}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'
    - name: Configure JMS http URL
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  httpUrl: '
         line: '  httpUrl: ${HTTPURL}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'
    - name: Configure JMS http Connection Handler
      ansible.builtin.replace:
         dest: '{{ item }}'
         regexp: 'http\:\/\/localhost\:8080'
         replace: '{% if tls is defined and tls|bool %}${HTTPURL}", "tlsTrustCertsFilePath": "${TLSCERTPATH}{% else %}${HTTPURL}{% endif %}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'
    - name: Configure tlsTrustCertsFilePath
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  tlsTrustCertsFilePath:'
         line: '  tlsTrustCertsFilePath: ${TLSCERTPATH}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'
    - name: Configure memory
      lineinfile:
         dest: /opt/benchmark/bin/benchmark-worker
         regexp: '^JVM_MEM='
         line: 'JVM_MEM="-Xms6G -Xmx12G -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -XX:+ParallelRefProcEnabled -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=12 -XX:ConcGCThreads=12 -XX:+DisableExplicitGC -XX:+PerfDisableSharedMem -XX:+AlwaysPreTouch -XX:-UseBiasedLocking"'
    - name: call setenv.sh
      lineinfile:
         dest: /opt/benchmark/bin/benchmark
         regexp: '^JVM_GC_LOG='
         line: '. ./bin/setenv.sh'
    - name: Configure memory
      lineinfile:
         dest: /opt/benchmark/bin/benchmark
         regexp: '^JVM_MEM='
         line: 'JVM_MEM="-Xmx4G"'
    - name: Install benchmark systemd service
      template:
        src: "templates/benchmark-worker.service"
        dest: "/etc/systemd/system/benchmark-worker.service"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "benchmark-worker"

- name: List host addresses
  hosts: localhost
  become: false
  tasks:
    - debug:
        msg: "Zookeeper servers {{ item }}"
      with_items: "{{ groups['zookeeper'] }}"
    - debug:
        msg: "Pulsar/BookKeeper servers {{ item }}"
      with_items: "{{ groups['pulsar'] }}"
    - debug:
        msg: "Benchmark clients {{ item }}"
      with_items: "{{ groups['client'] }}"
    - debug:
        msg: "Prometheus servers {{ item }}"
      with_items: "{{ groups['prometheus'] }}"
      when: prometheus_package is defined
